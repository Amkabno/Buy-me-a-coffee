// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String @unique
  profile          Profile?
  bankCard         BankCard?
  donationsMade     Donation[] @relation("DonationsMade")
  donationsReceived Donation[] @relation("DonationsReceived")
}


model Donation {
  id                      Int      @id @default(autoincrement())
  amount                  Int
  specialMessage          String
  socialURLorBuyMeACoffee String
  donorId                 Int
  recipientId             Int
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  donor       User @relation("DonationsMade", fields: [donorId], references: [id])
  recipient   User @relation("DonationsReceived", fields: [recipientId], references: [id])
}
model BankCard {
  id         Int      @id @default(autoincrement())
  country    String
  firstName  String
  lastName   String
  cardNumber   String
  expiryDate DateTime
  createAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade )
  userId Int @unique
}

model Profile {
  id               Int      @id @default(autoincrement()) 
  name             String
  about            String
  avatarImage      String
  socialMediaURL   String
  backgroundImage  String
  successMessage   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
 userId Int @unique
}